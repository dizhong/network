#!/usr/bin/env python3
import socket
import sys
import argparse
import random
import requests
import dns.message
import dns.resolver
import math


def find_ip_list(host_list):
    ip_list = []
    for host in host_list:
        resolver = dns.resolver.Resolver()
        resolver_response = resolver.query(host)
        ip = resolver_response.response.answer[0][0].address
        r = requests.get("http://api.ipstack.com/" + ip + "?access_key=bda9aedc6efe2edae867bbc4e247d3b7")
        rjson = r.json()
        latitude = rjson["latitude"]
        longitude = rjson["longitude"]
        # print(latitude)
        # print(longitude)
        ip_list.append((ip, latitude, longitude))
    return ip_list


# find closest server based on latitude and longitude
# because of 10k request limit on ipstack, if anything goes wrong
# falls back to random selection.
def find_server(client_ip, ip_list):
    r = requests.get("http://api.ipstack.com/" + client_ip + "?access_key=bda9aedc6efe2edae867bbc4e247d3b7")
    if r.status_code != 200:
        result_ip = ip_list[random.randint(0, 5)][0]
    else: 
        rjson = r.json()
        print(rjson)
        latitude = rjson["latitude"]
        longitude = rjson["longitude"]
        print(latitude)
        print(longitude)
        mindis = 2000
        result_ip = 0
        for ip in ip_list:
            distance = math.sqrt( ((latitude - ip[1]) ** 2) + ((longitude - ip[2]) ** 2) )
            if distance < mindis:
                mindis = distance
                result_ip = ip[0]
    return result_ip


def main():
    if len(sys.argv) == 5:
        parser = argparse.ArgumentParser(description="get port and name")
        parser.add_argument('-p', action='store')
        parser.add_argument('-n', action='store')
        args = parser.parse_args()
        args = vars(args)
        PORT = int(args['p'])
        NAME = args['n']
    else:
        print("Run like: ./dnsserver -p [port] -n [name]")
        sys.exit()

    # create a udp socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    HOST = socket.gethostbyname(socket.gethostname())
    print(HOST)
    print(PORT)
    sock.bind((HOST, PORT))

    # resolve randomly (hand-)selected http server ip
    # resolver = dns.resolver.Resolver()
    # host = "ec2-34-238-192-84.compute-1.amazonaws.com"
    # resolver_response = resolver.query(host)
    # ip = resolver_response.response.answer[0][0].address
    
    # hard code list of available servers just cuz
    host_list = ["ec2-34-238-192-84.compute-1.amazonaws.com",
                 "ec2-13-231-206-182.ap-northeast-1.compute.amazonaws.com",
                 "ec2-13-239-22-118.ap-southeast-2.compute.amazonaws.com",
                 "ec2-34-248-209-79.eu-west-1.compute.amazonaws.com",
                 "ec2-18-231-122-62.sa-east-1.compute.amazonaws.com",
                 "ec2-3-101-37-125.us-west-1.compute.amazonaws.com"]
    ip_list = find_ip_list(host_list)

    while True:
        data, addr = sock.recvfrom(1024)
        req = dns.message.from_wire(data)

        print(addr)

        # Construct IN A response
        ip = find_server(addr[0], ip_list)
        rdata = dns.rdtypes.IN.A.A(
          dns.rdataclass.IN,
          dns.rdatatype.A,
          ip
        )

        rdataset = dns.rrset.from_rdata_list(
          "cs5700cdn.example.com.",
          50,
          [rdata]
        )

        resp = dns.message.make_response(req)
        resp.answer = [rdataset]
        resp.flags = resp.flags | dns.flags.AA
        resp_bytes = resp.to_wire()


        sock.sendto(resp_bytes, addr)
        print("responded to 1 query")
        
if __name__ == "__main__":
    main()
